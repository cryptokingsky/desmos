// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/posts/v1beta1/keeper/types.proto

package keeper

import (
	fmt "fmt"
	types "github.com/desmos-labs/desmos/x/posts/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WrappedUInt wraps a uint value
type WrappedUInt struct {
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *WrappedUInt) Reset()         { *m = WrappedUInt{} }
func (m *WrappedUInt) String() string { return proto.CompactTextString(m) }
func (*WrappedUInt) ProtoMessage()    {}
func (*WrappedUInt) Descriptor() ([]byte, []int) {
	return fileDescriptor_137f1d22e44eee30, []int{0}
}
func (m *WrappedUInt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WrappedUInt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WrappedUInt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WrappedUInt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrappedUInt.Merge(m, src)
}
func (m *WrappedUInt) XXX_Size() int {
	return m.Size()
}
func (m *WrappedUInt) XXX_DiscardUnknown() {
	xxx_messageInfo_WrappedUInt.DiscardUnknown(m)
}

var xxx_messageInfo_WrappedUInt proto.InternalMessageInfo

func (m *WrappedUInt) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// CommentIDs wraps the list of comments of a post
type CommentIDs struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *CommentIDs) Reset()         { *m = CommentIDs{} }
func (m *CommentIDs) String() string { return proto.CompactTextString(m) }
func (*CommentIDs) ProtoMessage()    {}
func (*CommentIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_137f1d22e44eee30, []int{1}
}
func (m *CommentIDs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentIDs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentIDs.Merge(m, src)
}
func (m *CommentIDs) XXX_Size() int {
	return m.Size()
}
func (m *CommentIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentIDs.DiscardUnknown(m)
}

var xxx_messageInfo_CommentIDs proto.InternalMessageInfo

func (m *CommentIDs) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

// WrappedUserAnswers wraps a list of UserAnswer
type WrappedUserAnswers struct {
	Answers []types.UserAnswer `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers"`
}

func (m *WrappedUserAnswers) Reset()         { *m = WrappedUserAnswers{} }
func (m *WrappedUserAnswers) String() string { return proto.CompactTextString(m) }
func (*WrappedUserAnswers) ProtoMessage()    {}
func (*WrappedUserAnswers) Descriptor() ([]byte, []int) {
	return fileDescriptor_137f1d22e44eee30, []int{2}
}
func (m *WrappedUserAnswers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WrappedUserAnswers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WrappedUserAnswers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WrappedUserAnswers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrappedUserAnswers.Merge(m, src)
}
func (m *WrappedUserAnswers) XXX_Size() int {
	return m.Size()
}
func (m *WrappedUserAnswers) XXX_DiscardUnknown() {
	xxx_messageInfo_WrappedUserAnswers.DiscardUnknown(m)
}

var xxx_messageInfo_WrappedUserAnswers proto.InternalMessageInfo

func (m *WrappedUserAnswers) GetAnswers() []types.UserAnswer {
	if m != nil {
		return m.Answers
	}
	return nil
}

// WrappedRegisteredReactions wraps a list of post reactions
type WrappedRegisteredReactions struct {
	Reactions []types.RegisteredReaction `protobuf:"bytes,1,rep,name=reactions,proto3" json:"reactions"`
}

func (m *WrappedRegisteredReactions) Reset()         { *m = WrappedRegisteredReactions{} }
func (m *WrappedRegisteredReactions) String() string { return proto.CompactTextString(m) }
func (*WrappedRegisteredReactions) ProtoMessage()    {}
func (*WrappedRegisteredReactions) Descriptor() ([]byte, []int) {
	return fileDescriptor_137f1d22e44eee30, []int{3}
}
func (m *WrappedRegisteredReactions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WrappedRegisteredReactions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WrappedRegisteredReactions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WrappedRegisteredReactions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrappedRegisteredReactions.Merge(m, src)
}
func (m *WrappedRegisteredReactions) XXX_Size() int {
	return m.Size()
}
func (m *WrappedRegisteredReactions) XXX_DiscardUnknown() {
	xxx_messageInfo_WrappedRegisteredReactions.DiscardUnknown(m)
}

var xxx_messageInfo_WrappedRegisteredReactions proto.InternalMessageInfo

func (m *WrappedRegisteredReactions) GetReactions() []types.RegisteredReaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

// WrappedPostReactions wraps a list of registered reactions
type WrappedPostReactions struct {
	Reactions []types.PostReaction `protobuf:"bytes,1,rep,name=reactions,proto3" json:"reactions"`
}

func (m *WrappedPostReactions) Reset()         { *m = WrappedPostReactions{} }
func (m *WrappedPostReactions) String() string { return proto.CompactTextString(m) }
func (*WrappedPostReactions) ProtoMessage()    {}
func (*WrappedPostReactions) Descriptor() ([]byte, []int) {
	return fileDescriptor_137f1d22e44eee30, []int{4}
}
func (m *WrappedPostReactions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WrappedPostReactions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WrappedPostReactions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WrappedPostReactions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrappedPostReactions.Merge(m, src)
}
func (m *WrappedPostReactions) XXX_Size() int {
	return m.Size()
}
func (m *WrappedPostReactions) XXX_DiscardUnknown() {
	xxx_messageInfo_WrappedPostReactions.DiscardUnknown(m)
}

var xxx_messageInfo_WrappedPostReactions proto.InternalMessageInfo

func (m *WrappedPostReactions) GetReactions() []types.PostReaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

func init() {
	proto.RegisterType((*WrappedUInt)(nil), "desmos.posts.v1beta1.WrappedUInt")
	proto.RegisterType((*CommentIDs)(nil), "desmos.posts.v1beta1.CommentIDs")
	proto.RegisterType((*WrappedUserAnswers)(nil), "desmos.posts.v1beta1.WrappedUserAnswers")
	proto.RegisterType((*WrappedRegisteredReactions)(nil), "desmos.posts.v1beta1.WrappedRegisteredReactions")
	proto.RegisterType((*WrappedPostReactions)(nil), "desmos.posts.v1beta1.WrappedPostReactions")
}

func init() {
	proto.RegisterFile("desmos/posts/v1beta1/keeper/types.proto", fileDescriptor_137f1d22e44eee30)
}

var fileDescriptor_137f1d22e44eee30 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x14, 0x45, 0x13, 0x5a, 0x95, 0x4e, 0x37, 0x12, 0xb2, 0x28, 0x59, 0x8c, 0x21, 0x0a, 0x76, 0xa1,
	0x19, 0xaa, 0x3f, 0xa0, 0x55, 0x0a, 0x05, 0x17, 0x12, 0x50, 0xc1, 0x85, 0x90, 0xb4, 0x8f, 0x18,
	0x4d, 0x32, 0xc3, 0xbc, 0x69, 0xd5, 0xbf, 0xf0, 0xb3, 0xba, 0xec, 0xd2, 0x95, 0x48, 0xfb, 0x23,
	0xd2, 0xcc, 0xd4, 0x0a, 0xcd, 0xee, 0x06, 0xce, 0xbd, 0x87, 0xc7, 0x84, 0x1c, 0x8f, 0x01, 0x0b,
	0x8e, 0x4c, 0x70, 0x54, 0xc8, 0xa6, 0xbd, 0x04, 0x54, 0xdc, 0x63, 0xaf, 0x00, 0x02, 0x24, 0x53,
	0x1f, 0x02, 0x30, 0x14, 0x92, 0x2b, 0xee, 0xb8, 0x1a, 0x0c, 0x2b, 0x30, 0x34, 0xa0, 0xe7, 0xa6,
	0x3c, 0xe5, 0x15, 0xc0, 0x56, 0x49, 0xb3, 0x9e, 0x5f, 0x3b, 0x2a, 0x78, 0x9e, 0x9b, 0x35, 0xef,
	0xa8, 0x96, 0x90, 0x10, 0x8f, 0x54, 0xc6, 0x4b, 0x43, 0x05, 0x87, 0xa4, 0xfd, 0x20, 0x63, 0x21,
	0x60, 0x7c, 0x37, 0x2c, 0x95, 0xe3, 0x92, 0x9d, 0x69, 0x9c, 0x4f, 0xa0, 0x63, 0xfb, 0x76, 0xb7,
	0x19, 0xe9, 0x8f, 0x80, 0x12, 0x72, 0xc5, 0x8b, 0x02, 0x4a, 0x35, 0xbc, 0x46, 0x67, 0x9f, 0x34,
	0xb2, 0x31, 0x76, 0x6c, 0xbf, 0xd1, 0x6d, 0x45, 0xab, 0x18, 0xdc, 0x13, 0x67, 0x3d, 0x82, 0x20,
	0x2f, 0x4b, 0x7c, 0x03, 0x89, 0xce, 0x05, 0xd9, 0x8b, 0x75, 0xac, 0xd8, 0xf6, 0x99, 0x1f, 0xd6,
	0x1d, 0x18, 0x6e, 0x3a, 0xfd, 0xe6, 0xec, 0xfb, 0xc0, 0x8a, 0xd6, 0xb5, 0xe0, 0x85, 0x78, 0x66,
	0x37, 0x82, 0x34, 0x43, 0x05, 0x72, 0x95, 0xcc, 0x01, 0xce, 0x0d, 0x69, 0xfd, 0x5d, 0x63, 0x0c,
	0xdd, 0x7a, 0xc3, 0x76, 0xdb, 0x98, 0x36, 0x03, 0xc1, 0x13, 0x71, 0x8d, 0xeb, 0x96, 0xa3, 0xda,
	0x58, 0x06, 0xdb, 0x96, 0xa0, 0xde, 0xf2, 0xbf, 0xb7, 0xb5, 0xdf, 0x1f, 0xcc, 0x16, 0xd4, 0x9e,
	0x2f, 0xa8, 0xfd, 0xb3, 0xa0, 0xf6, 0xe7, 0x92, 0x5a, 0xf3, 0x25, 0xb5, 0xbe, 0x96, 0xd4, 0x7a,
	0x3c, 0x49, 0x33, 0xf5, 0x3c, 0x49, 0xc2, 0x11, 0x2f, 0x98, 0x1e, 0x3e, 0xcd, 0xe3, 0x04, 0x4d,
	0x66, 0xef, 0xe6, 0x05, 0xf5, 0x0f, 0x93, 0xec, 0x56, 0xef, 0x76, 0xfe, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0x53, 0x33, 0xfe, 0x25, 0x56, 0x02, 0x00, 0x00,
}

func (m *WrappedUInt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WrappedUInt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WrappedUInt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommentIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentIDs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommentIDs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WrappedUserAnswers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WrappedUserAnswers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WrappedUserAnswers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Answers) > 0 {
		for iNdEx := len(m.Answers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Answers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WrappedRegisteredReactions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WrappedRegisteredReactions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WrappedRegisteredReactions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reactions) > 0 {
		for iNdEx := len(m.Reactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WrappedPostReactions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WrappedPostReactions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WrappedPostReactions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reactions) > 0 {
		for iNdEx := len(m.Reactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WrappedUInt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovTypes(uint64(m.Value))
	}
	return n
}

func (m *CommentIDs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *WrappedUserAnswers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Answers) > 0 {
		for _, e := range m.Answers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *WrappedRegisteredReactions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reactions) > 0 {
		for _, e := range m.Reactions {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *WrappedPostReactions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reactions) > 0 {
		for _, e := range m.Reactions {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WrappedUInt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WrappedUInt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WrappedUInt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WrappedUserAnswers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WrappedUserAnswers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WrappedUserAnswers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answers = append(m.Answers, types.UserAnswer{})
			if err := m.Answers[len(m.Answers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WrappedRegisteredReactions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WrappedRegisteredReactions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WrappedRegisteredReactions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reactions = append(m.Reactions, types.RegisteredReaction{})
			if err := m.Reactions[len(m.Reactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WrappedPostReactions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WrappedPostReactions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WrappedPostReactions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reactions = append(m.Reactions, types.PostReaction{})
			if err := m.Reactions[len(m.Reactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
